#!/bin/bash

this_dir=$(cd $(dirname $0);pwd)
this_script=$(basename $0)

#. $this_dir/functions
#--- Variables
isoImage="pfSense-CE-2.3.3-RELEASE-amd64.iso"
isoImagePath=$this_dir/../${isoImage}
isoURL=https://frafiles.pfsense.org/mirror/downloads/${isoImage}.gz

isoGz="${isoImage}.gz"
isoURL="https://frafiles.pfsense.org/mirror/downloads/${isoImage}.gz"
if [ ! -e "$isoImage" ]; then
       if [ ! -e "$isoGz" ]; then
               wget "$isoURL"
               gunzip "$isoGz"
       else
               gunzip "$isoGz"
       fi
fi


sshPort=9998
hosts="fw01 fw02"

WAN_IP=192.168.149.1
WAN_SUBNET=255.255.255.0

LAN_IP=192.168.150.1
WAN_SUBNET=255.255.255.0

#========================================================
# FUNCTIONS
#========================================================

function createHostOnlyNetwork(){
  local curIF=$(VBoxManage hostonlyif create 2>/dev/null | awk '{print $2}' | sed -e "s/'//g")
  echo "Created network: $curIF - Remove with:" 1>&2
  echo "VBoxManage hostonlyif remove $curIF" 1>&2
  echo "$curIF"
}

function setupWAN(){
  return 0
}

function setupLAN(){
  vBoxManage hostonlyif ipconfig $LAN_Network --ip $LAN_IP
  return 0
}

function setupSYNC(){
  return 0
}

#========================================================
# MAIN
#========================================================

#--- configure Virtualbox networks

NAT_Network=NatNetwork
WAN_Network=$(createHostOnlyNetwork)
LAN_Network=$(createHostOnlyNetwork)
SYNC_Network=$(createHostOnlyNetwork)

setupWAN ${WAN_Network}
setupLAN ${LAN_Network}
setupSYNC ${SYNC_Network}

for vmName in ${hosts}
do
cat<<EOT>${vmName}.sh
    #adapterType=82540OEM
    #adapterType=82543GC
    #adapterType=virtio
    adapterType=82545EM

    WAN_Network=$WAN_Network
    NAT_Network=$NAT_Network
    LAN_Network=$LAN_Network
    SYNC_Network=$SYNC_Network

    VBoxManage createvm --name "$vmName" --register
    vmDir=\$(VBoxManage showvminfo "$vmName" | grep "^Config file:"  | awk -F":" '{print \$2}' | xargs -L1 -IX dirname "X")
    VBoxManage modifyvm "$vmName" --memory 256 --acpi on --boot1 dvd --vram 33 --cpus 1

    # https://www.thomas-krenn.com/de/wiki/Netzwerkkonfiguration_in_VirtualBox#Beispielkonfiguration_eines_statischen_NAT_Netzwerks
    #--- Network cards
    #VBoxManage modifyvm "$vmName" --nic1 hostonly --nictype1 \$adapterType --hostonlyadapter1 \${WAN_Network}
    VBoxManage modifyvm "$vmName" --nic1 natnetwork --nictype1 \$adapterType --hostonlyadapter1 \${NAT_Network}
    VBoxManage modifyvm "$vmName" --nic2 hostonly --nictype2 \$adapterType --hostonlyadapter2 \${LAN_Network}
    VBoxManage modifyvm "$vmName" --nic3 hostonly --nictype3 \$adapterType --hostonlyadapter3 \${SYNC_Network}
    VBoxManage modifyvm "$vmName" --nic4 hostonly --nictype4 \$adapterType --hostonlyadapter4 \${SYNC_Network}
    VBoxManage modifyvm "$vmName" --nic5 hostonly --nictype5 \$adapterType --hostonlyadapter5 \${SYNC_Network}
    VBoxManage modifyvm "$vmName" --nic6 hostonly --nictype6 \$adapterType --hostonlyadapter6 \${SYNC_Network}
    VBoxManage modifyvm "$vmName" --nic7 hostonly --nictype7 \$adapterType --hostonlyadapter7 \${SYNC_Network}
    VBoxManage modifyvm "$vmName" --nic8 hostonly --nictype8 \$adapterType --hostonlyadapter8 \${SYNC_Network}

    #--- Promiscous mode for WAN and LAN
    VBoxManage modifyvm "$vmName"  --nicpromisc1 allow-all
    VBoxManage modifyvm "$vmName"  --nicpromisc2 allow-all

    VBoxManage modifyvm "$vmName" --ostype FreeBSD_64
    VBoxManage modifyvm "$vmName"  --ioapic on
    VBoxManage modifyvm "$vmName"  --boot1 disk
    VBoxManage modifyvm "$vmName"  --boot2 dvd

    VBoxManage createhd --filename "\$vmDir/${vmName}.vdi" --size 2000
    VBoxManage storagectl "$vmName" --name "SATA" --add sata
    VBoxManage storageattach "$vmName" --storagectl "SATA" --port 0 --device 0 --type hdd --medium "\${vmDir}/${vmName}.vdi"
    VBoxManage storagectl "$vmName" --name "IDE" --add ide
    VBoxManage storageattach "$vmName" --storagectl "IDE" --port 1 --device 0 --type dvddrive --medium "$isoImage"

    VBoxManage showvminfo "$vmName"
    VBoxManage startvm "$vmName"
EOT

    (( sshPort += 1 ))
  echo "bash ${vmName}.sh"
done

cat<<EOT | tee cleanup.sh

#Cleanup:

VBoxManage hostonlyif remove ${WAN_Network}
VBoxManage hostonlyif remove ${LAN_Network}
VBoxManage hostonlyif remove ${SYNC_Network}

EOT

echo  "Or run: sh cleanup.sh"
